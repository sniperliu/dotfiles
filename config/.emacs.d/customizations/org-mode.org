#+title: org-mode

* General

#+begin_src emacs-lisp
(use-package org
  :ensure t
  :config
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)

  ;; shortcut key to open toplevel file
  (global-set-key "\C-oO" (lambda ()
                            (interactive)
                            (find-file "~/Dropbox/org/GTD/newgtd.org")))

  ;; Export " as " and "
  (setq org-export-with-smart-quotes t))
#+end_src

* Todo

#+begin_src emacs-lisp
(use-package org
  :ensure t
  :config
  ;; log the todo item closed time
  (setq org-log-done t)
  ;; GTD-style TODO states:
  (setq org-todo-keywords
    '((sequence "TODO(t)" "STARTED(s)" "NEXT(n)" "SOMEDAY(f)" "|" "DONE(d)")
      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))

  (setq org-todo-keyword-faces
    '(("TODO" . org-warning)
      ("STARTED" . "yellow")
      ("DONE" . "#5F7F5F")
      ("ELSEWHERE" . "#5F7F5F")
      ("CANCELLDED" . "#8CD0D3")))
  (setq org-use-fast-todo-selection t))
#+end_src

* Agenda

#+begin_src emacs-lisp
(use-package org
  :ensure t
  :config
  ;; remove done tasks from agenda view
  (setq org-agenda-skip-function-global
    '(org-agenda-skip-entry-if 'todo '("DONE" "CANCELLED")))

  ;; customize agenda commands
  (setq org-agenda-custom-commands
      '(("H" "Office and Home Lists"
         ((agenda)
          (tags-todo "OFFICE")
          (tags-todo "HOME")
          (tags-todo "COMPUTER")))
        ("D" "Daily Action List"
         ((agenda "" ((org-agenda-ndays 1)
                      (org-agenda-sorting-strategy
                       '((agenda time-up priority-down tag-up)))
                      (org-deadline-warning-days 0)))))))
;;        ("P" "Daily Planning List"
;;         ((agenda "" ((org-agenda-ndays 1)
;;                      (org-agenda-sorting-strategy
;;                       '((agenda time-up priority-down tag-up)))
;;                      (org-deadline-warning-days 0)))
;;          (tags-todo nil
;;                     ((org-agenda-overriding-header "Tasks")
;;                      ;; (org-agenda-skip-function 'bh/skip-non-stuck-projects)
;;                      (org-agenda-sorting-strategy '(category-keep))))))))

  ;; refile targets
  (setq org-refile-targets  '((nil :maxlevel . 9)
                            (org-agenda-files :maxlevel . 9))))
#+end_src

* Capture

#+begin_src emacs-lisp
(use-package org
  :ensure t
  :config
  ;; Org-Capture
  (setq org-default-notes-file "~/Dropbox/org/GTD/newgtd.org")

  ;; set org-capture templates
  (setq org-capture-templates
      '(("t" "todo" entry (file+headline "~/Dropbox/org/GTD/newgtd.org" "Tasks")
         "** TODO %^{Task} %^g %?")
        ("j" "journal" entry (file "~/Dropbox/org/GTD/journal.org")
         "** %^{Journal} %^g \n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"))))
#+end_src

* Export

** specs

#+begin_src emacs-lisp
(use-package org
  :ensure t
  :config
  ;;; Commentary:
  ;;; configuration for specs writing with org-mode
  ;;; http://katherine.cox-buday.com/blog/2015/03/14/writing-specs-with-org-mode/
  ;;; Code:
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((plantuml . t)
      (ledger . t)))

  ;;; latex export style
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes
          '("specs-style"
            "\\documentclass{./specs-style}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
          '("ctexart"
            "\\documentclass[UTF8]{ctexart}
             \\usepackage{amsmath,latexsym,amssymb,mathrsfs,pifont}
             \\usepackage[T1]{fontenc}
             \\usepackage{fixltx2e}
             \\usepackage{graphicx}
             \\usepackage{subfig}
             \\usepackage{grffile}
             \\usepackage{longtable}
             \\usepackage{wrapfig}
             \\usepackage{rotating}
             \\usepackage[colorlinks=true]{hyperref}
             \\tolerance=1000
             [NO-DEFAULT-PACKAGES]
             [NO-PACKAGES]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;;; use xelatex for UTF-8 & Chinese character
  (setq org-latex-to-pdf-process
    '("xelatex -interaction nonstopmode -output-directory %o %f"
      "xelatex -interaction nonstopmode -output-directory %o %f"
      "xelatex -interaction nonstopmode -output-directory %o %f")))

(use-package plantuml-mode
  :ensure t
  :config
  (setq org-plantuml-jar-path
      (setq plantuml-jar-path (expand-file-name "./Applications/plantuml/plantuml.jar"))))
#+end_src

** Presentation

#+begin_src emacs-lisp
(use-package ox-reveal
  :ensure t)

(use-package htmlize
  :ensure t)
#+end_src

* Share

#+begin_src emacs-lisp
;;; Commentary: MobileOrg Setup
(use-package org
  :ensure t
  :config
  (setq org-directory "~/Dropbox/org/gtd")
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (setq org-mobile-inbox-for-pull "~/Dropbox/org/GTD/from-mobile.org")
  ;; auto push & pull
  (add-hook 'after-init-hook 'org-mobile-pull)
  (add-hook 'kill-emacs-hook 'org-mobile-push))
#+end_src
